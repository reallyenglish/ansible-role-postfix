---
# tasks file for ansible-role-postfix

- include_vars: "{{ ansible_os_family }}.yml"
  when:
    - ansible_os_family != 'Debian'

- include_vars: "{{ ansible_distribution }}.yml"
  when:
    - ansible_os_family == 'Debian'


- name: postfix_main_cf must be defined
  assert:
    that:
      - postfix_main_cf is defined
    msg: postfix_main_cf is not defined. it must be a dict

- set_fact:
    postfix_main_cf_merged: "{{ postfix_main_cf_default | combine(postfix_main_cf, recursive = True) }}"

# build postfix_aliases_default_created.
#
# postfix_aliases_default_created is a dict contains default aliases. it is
# either a dict of aliases from system default (postfix_aliases_default), or
# empty dict if user has opted to by setting postfix_aliases_default_is_empty.
#
- block:
  # block for Debian and Ubuntu
  - name: ansible_distribution_major_version must be defined
    # assume `aliases(5)` does not differ in major version
    assert:
      that:
        - ansible_distribution_major_version is defined
      msg: ansible_distribution_major_version is not defined

  - name: postfix_aliases_default[ansible_distribution_version] must be defined
    assert:
      that:
        - postfix_aliases_default[ansible_distribution_major_version] is defined
      msg: postfix_aliases_default[ansible_distribution_major_version] is not defined. make sure the role supports your platform and its version.

  - name: Set aliases from the system default (Debian family)
    set_fact:
      postfix_aliases_default_created: "{{ postfix_aliases_default[ansible_distribution_major_version] }}"
  when:
    - not postfix_aliases_default_is_empty
    - ansible_os_family == 'Debian'

- block:
  # block for OpenBSD
  - name: postfix_aliases_default[ansible_distribution_release] must be defined
    assert:
      that:
        - postfix_aliases_default[ansible_distribution_release] is defined
      msg: postfix_aliases_default[ansible_distribution_release] is not defined. make sure the role supports your platform and its version.

  - set_fact:
    # XXX this is a bug in ansible, which says ansible_distribution_version ==
    # "release" while ansible_distribution_release == "6.0"
      postfix_aliases_default_created: "{{ postfix_aliases_default[ansible_distribution_release] }}"
  when:
    - not postfix_aliases_default_is_empty
    - ansible_os_family == 'OpenBSD'

- block:
  # block for RedHat
  - set_fact:
      postfix_aliases_default_created: "{{ postfix_aliases_default[ansible_distribution_major_version] }}"
  when:
    - not postfix_aliases_default_is_empty
    - ansible_os_family == 'RedHat'

- block:
  # block for FreeBSD
  # XXX ansible_distribution_version is broken in ansible 2.1.0.0
  - name: Get FreeBSD version
    shell: "uname -r | cut -f 1 -d '-'"
    register: register_postfix_freebsd_version
    changed_when: false

  - set_fact:
      postfix_aliases_default_created: "{{ postfix_aliases_default[register_postfix_freebsd_version.stdout | quote] }}"
  when:
    - not postfix_aliases_default_is_empty
    - ansible_os_family == 'FreeBSD'

- name: Set empty default aliases if the user has opted to
  set_fact:
    postfix_aliases_default_created: {}
  when:
    - postfix_aliases_default_is_empty

- name: postfix_aliases must be defined
  assert:
    that:
      - postfix_aliases is defined
    msg: postfix_aliases must be defined and a dict

- name: postfix_aliases_default_created must be defined
  assert:
    that:
      - postfix_aliases_default_created is defined
    msg: "[BUG] postfix_aliases_default_created is not defined"

# then, merge the created default aliases and user-defined aliases
- set_fact:
    postfix_aliases_merged: "{{ postfix_aliases_default_created | combine(postfix_aliases) }}"

- include: "install-{{ ansible_os_family }}.yml"

- name: Create database directory
  file:
    path: "{{ postfix_db_dir }}"
    mode: 0755
    state: directory

- name: Create master.cf
  template:
    src: master.cf.j2
    dest: "{{ postfix_master_cf_path }}"
  notify: Restart postfix

- name: Create main.cf
  template:
    src: main.cf.j2
    dest: "{{ postfix_main_cf_path }}"
  notify: Reload postfix

- name: Create aliases(5)
  template:
    src: aliases.j2
    dest: "{{ postfix_aliases_file }}"
    backup: yes
  register: register_postfix_aliases_file

- name: Stat aliases(5)
  stat:
    path: "{{ postfix_aliases_file }}"
  register: register_postfix_aliases_file_st

- name: Stat aliases.db
  stat:
    path: "{{ postfix_aliases_file }}.db"
  register: register_postfix_aliases_db_st

- name: Update aliases(5)
  command: newaliases
  when:
    # translation: update aliases.db does not exist or aliases is newer than
    # aliases.db
    - register_postfix_aliases_db_st.stat.exists == false or (register_postfix_aliases_file_st.stat.mtime > register_postfix_aliases_db_st.stat.mtime)

- name: Register alias_maps
  shell: "postconf -pxh alias_maps | cut -f 2 -d:"
  register: register_alias_maps
  changed_when: false

- name: Create lookup table files
  template:
    src: table.j2
    dest: "{{ postfix_db_dir }}/{{ item.name }}"
  register: register_postfix_create_lookup_table
  # TODO create a wrapper script to validate file-based database files
  # validate: postmap_validate -t {{ item.value.type }} %s
  with_items: "{{ postfix_tables  }}"
  notify: Reload postfix

- set_fact:
    # extract file name that needs to be postmap(8)ed from `postfix_tables`
    postfix_text_databases: "{{ postfix_tables | selectattr('type', 'match', '^(btree|cdb|dbm|hash|lmdb|sdbm)$') | map(attribute='name') | list }}"

- name: Run postmap(1) on changed text databases
  command: "postmap {{ item.item.type }}:{{ item.invocation.module_args.dest }}"
  with_items: "{{ register_postfix_create_lookup_table.results }}"
  # translation: run postmap when the table is one of text-based database, and
  # the table has changed or its database file does not exist
  when:
    - item.item.name in postfix_text_databases
    # for a reason I do not know, "not (var + 'string' | exists)" does not work
    # here
    - "item.changed or not ( [item.invocation.module_args.dest, 'db'] | join('.') | exists )"

- name: Validate all configurations
  command: postfix check
  register: register_postfix_check
  changed_when: false
  failed_when: false

- name: Assert postfix check is successful, if not, show friendly message
  assert:
    msg: "`postfix check` failed. postfix has not been reloaded but some configurations might have been read by postfix. Run `postfix check`, find out error, fix it and deploy again"
    that:
      - register_postfix_check.rc == 0

- name: Start postfix
  service:
    name: "{{ postfix_service }}"
    state: started
